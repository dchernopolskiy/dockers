Icon="dockerMan.png"
Menu="ExtensionMenu"
Title="Docker"
---
<link type="text/css" rel="stylesheet" href="/plugins/webGui/style/default_tablesorter.css">
<link type="text/css" rel="stylesheet" href="/plugins/dockerMan/jquery-ui/jquery-ui.min.css">
<link type="text/css" rel="stylesheet" href="/plugins/dockerMan/jquery-ui/jquery-ui.structure.min.css">
<link rel="stylesheet" type="text/css" href="/plugins/dockerMan/jquery-ui/jquery-ui.theme.min.css">
<script type="text/javascript" src="/plugins/vendor/tablesorter/jquery.tablesorter.min.js"></script>
<script type="text/javascript" src="/plugins/dockerMan/jquery-ui/jquery-ui.min.js"></script>

<?php
function pgrep($process_name) {
	$pid = exec("pgrep $process_name", $output, $retval);
	if ($retval != 0)
		$pid = FALSE;
	return $pid;
}

// Docker configuration file
$cfgfile = "/boot/config/docker.cfg";

// Set defaults
$dockercfg = array(
  'DOCKER_HOME'       => '/mnt/cache/docker',
  'DOCKER_OPTS'       => '--storage-driver=btrfs',
  'DOCKER_CONTAINERS' => ''
);

if (file_exists($cfgfile)) {
	$dockercfg = array_merge($dockercfg, parse_ini_file($cfgfile));
}

$docker_image_exists = file_exists($dockercfg['DOCKER_HOME']);

// Section START.
// This section contains especific code to allow containers and images to be managed.
// Update the start/stop configuration
if ($_POST){
	$container = urldecode(($_POST['#container']));
	unset($_POST['#container']);

	$new_containers = "";
	if( strpos($dockercfg["DOCKER_CONTAINERS"], $container) !== FALSE){
		foreach( explode(',', $dockercfg["DOCKER_CONTAINERS"]) as $ct) {
			$ct = trim($ct);
			if (strlen($ct)){
				if(preg_match("/\b{$ct}\b/", $container) == FALSE){
					$new_containers = $new_containers.$ct.",";
				}
			}
		}
	} else {
		$new_containers = $dockercfg["DOCKER_CONTAINERS"].",$container,";
	}
	$new_containers = preg_replace("/,,|,$|^,/","", $new_containers);

	$_POST["DOCKER_CONTAINERS"] = $new_containers;
	include("/usr/local/emhttp/plugins/webGui/update_cfg.php");

} else {

// Add the Docker JSON client
include("/usr/local/emhttp/plugins/dockerMan/DockerClient.php");
$docker = new DockerClient();
$DockerUpdate = new DockerUpdate();

// Grab the server IP address on br0 or eth0 interfaces.
function serverIP(){
  preg_match_all("/\d:\s+([^\s+]*)\s+inet\s+([^\/]*).+/", shell_exec('ip -o addr') , $matches);
  unset($matches[0]);
  $IP = '';
  for ($i=0; $i < count($matches[1]); $i++) {
    if (in_array($matches[1][$i], array('br0','eth0'))) {
      $IP = $matches[2][$i];
      break;
    }
  }
  return $IP;
}

function is_autostart($ct_name){
  global $dockercfg;
  $allAutoStart = explode(',', $dockercfg["DOCKER_CONTAINERS"]);
  if (count($allAutoStart)){
   foreach($allAutoStart  as $x) {
    if ( $x == $ct_name){
     return TRUE;
   }
 }
}
return FALSE;
}
// Section END.

// array must be started since that's where we store domains
//
if ($var['fsState'] != "Started") {
?>
  <p class="notice">Array must be Started to view Docker plugins.</p>
  <?php
	return;
}

if (pgrep('docker') === FALSE) { ?>

<form markdown="1" method="POST" action="/plugins/webGui/exec.php" target="progressFrame">
<input type="hidden" name="command" value="/etc/rc.d/rc.docker start" />  

Service Status:

:   Shut down
    > Before you can start the Docker service for the first time, please specify a folder 
    > path for Docker to install to.  Once started, Docker will always automatically start 
    > after the array has been started.

:   <input type="submit" value="Start" />

</form>

<form markdown="1" method="POST" action="/plugins/webGui/update_cfg.php" target="progressFrame">
<input type="hidden" name="#file" value="<?=$cfgfile;?>" />

Docker Install Location:

:   <input type="text" name="DOCKER_HOME" value="<?=$dockercfg['DOCKER_HOME'];?>" placeholder="e.g. /mnt/cache/docker" />
    > You must specify a btrfs formatted path for Docker.  The system will automatically
    > create any subfolders under this path when the Docker service is started.

:   <input type="submit" value="Apply" />

</form>

<?PHP } else { ?>

<form markdown="1" method="POST" action="/plugins/webGui/exec.php" target="progressFrame">
<input type="hidden" name="command" value="/etc/rc.d/rc.docker stop" />

Service Status:

:   Started
    > Before you can start the Docker service for the first time, please specify a folder
    > path for Docker to install to.  Once started, Docker will always automatically start
    > after the array has been started.

:   <input type="submit" value="Stop" />

Docker Install Location:

:   <?=$dockercfg['DOCKER_HOME'];?>
    > You must specify a btrfs formatted path for Docker.  The system will automatically
    > create any subfolders under this path when the Docker service is started.

</form>

<?PHP } ?>

<? if (pgrep('docker')) { ?>
<br>
<style>
  a.log{cursor:zoom-in;}
  a.exec{cursor:pointer;}
</style>
<script type="text/javascript" charset="utf-8">
function rmContainer(container, image){
  $( "#dialog-confirm" ).html('<p>Are you sure?</p>');
  $( "#dialog-confirm" ).dialog({
    title: 'Removing the container: ' + container,
    resizable: false,
    width: 500,
    height:150,
    modal: true,
    buttons: {
      "Just the container": function() {
        $( this ).dialog( "close" );
        var cmd = '/usr/bin/docker rm -f ' + container;
        execWithLog(cmd ,'Removing container: ' + container, false, true);
      },
      "Container and image": function() {
        $( this ).dialog( "close" );
        var cmd = '/usr/bin/docker rm -f ' + container + '; docker rmi ' + image;
        execWithLog(cmd ,'Removing container: ' + container, false, true);
      },
      Cancel: function() {
        $( this ).dialog( "close" );
      }
    }
  });
}

function rmImage(image, imageName){
  $( "#dialog-confirm" ).html( "Are you sure?" );
  $( "#dialog-confirm" ).dialog({
    title: "Removing the image: " + imageName,
    dialogClass: "alert",
    resizable: false,
    width: 500,
    height:150,
    modal: true,
    buttons: {
      "Just do it!": function() {
        $( this ).dialog( "close" );
        var cmd = '/usr/bin/docker rmi ' + image;
        execWithLog(cmd ,'Removing image: ' + image, false, true);
      },
      Cancel: function() {
        $( this ).dialog( "close" );
      }
    }
  });
}

function updateContainer(container){
  $('#dialog-confirm').html('<p>Are you sure?</p>');
  $( "#dialog-confirm" ).dialog({
    title: 'Updating the container: ' + container,
    resizable: false,
    width: 500,
    height:150,
    modal: true,
    buttons: {
      "Just do it!": function() {
        $( this ).dialog( "close" );
        execAddContainer(container, "Updating container: " + container, true);
      },
      Cancel: function() {
        $( this ).dialog( "close" );
      }
    }
  });
}

$(document).ready(function() {
  $("#docker_containers").tablesorter( {sortList: [[1,0]]} );
  $('#docker_containers tr:even').addClass('odd');
  $("#docker_images").tablesorter( {sortList: [[0,0]]} );
  $('#docker_images tr:even').addClass('odd');
});

function autoStart(container){
  document.getElementsByName("#container")[0].value = container;
  document.forms["formAutostart"].submit();
};
function containerControl(container, action){
  document.getElementById("#cmdStartStop").value = "/usr/bin/docker " + action + " " + container;
  document.forms["formStartStop"].submit();
};
function execWithLog(cmd, desc, ask, reload) {
  if (ask){
    r = confirm(desc+"\n\nAre you sure?");
    if (r == false){return;}
  }
  Shadowbox.open({
    content: "/plugins/dockerMan/execWithLog.php?cmd=" + cmd,
    player:'iframe',
    title: desc,
    height:((screen.height*2)/3)||0,
    width:((screen.width*2)/3)||0,
    options:{
      onClose: function(){ if (reload){location.reload();}},
    }
  });
}
function execAddContainer(container, desc, reload) {
  Shadowbox.open({
    content: "/plugins/dockerMan/CreateDocker.php?updateContainer=" + container,
    player:'iframe',
    title: desc,
    height:((screen.height*2)/3)||0,
    width:((screen.width*2)/3)||0,
    options:{
      onClose: function(){ if (reload){location.reload();}},
    }
  });
}
function addDocker(container) {
  container = (typeof container === "undefined") ? false : container;
  reload=true;
  if (container) {
    var title = 'Edit container: ' + container;
    op = "?xmlTemplate=user:/boot/config/plugins/Docker/my-" + container + ".xml";
  } else {
    var title = 'Create Container:';
    op = "";
  }
  Shadowbox.open({
    content: "/plugins/dockerMan/CreateDocker.php" + op,
    player:'iframe',
    title: title,
    height:((screen.height*2)/3)||0,
    width:'770px',
    options:{
      onClose: function(){ if (reload){location.reload();}},
    }
  });
};
</script>
<div id="dialog-confirm" title=""></div>
<form markdown="1" id="formAutostart" method="POST" action="" target="progressFrame">
  <input type="hidden" name="#container" value="none" />
  <input type="hidden" name="#file" value="<?=$cfgfile;?>" />
</form>

<form method="POST" id="formStartStop" action="/plugins/webGui/exec.php" target="progressFrame">
  <input type="hidden" id="#cmdStartStop" name="command" value="" />
</form>

<div id="title"><span class="left"><img src="/plugins/dockerMan/dockerMan.png" class="icon" width="16" height="16">Docker Containers</span><div style="text-align:right;"><a class="exec" onclick="addDocker();"><img src="/plugins/dockerMan/plus.png" alt="plus" width="30px" height=""></a> </div></div>
<table class="tablesorter" id="docker_containers">
  <thead>
    <tr><th>CONTROL</th><th>NAME</th><th>IMAGE</th><th>CREATED</th><th>STATUS</th><th>PORTS</th><th>VOLUME MAPPINGS</th><th>CONTAINER ID</th><th>AUTOSTART</th><th>UPDATE</th><th>REMOVE</th></tr>
  </thead>
  <tbody>
    <? $all_containers = $docker->getDockerContainers();
      $IP = serverIP();
      foreach($all_containers as $ct){ 
        $autostart = is_autostart($ct['Name']) ? "checked" : "";
        $ports = array();
        foreach ($ct['Ports'] as $p) {
          if (strlen($p['PublicPort'])){
            $ipAddr    = sprintf("%s:%s", $IP, $p['PublicPort']);
            $outFormat = sprintf("<a href=\"http://%s\" target=\"_blank\">%s->%s/%s</a>", $ipAddr, $ipAddr, $p['PrivatePort'], $p['Type']);
          } else {
            $outFormat = sprintf("%s/%s", $p['PrivatePort'], $p['Type']);
            }
          $ports[] = $outFormat;
        }
      $paths = array();
      if (count($ct['Volumes'])){
      	foreach ($ct['Volumes'] as $value) {
      		if (preg_match('/localtime/', $value) == TRUE){ continue; }
      		preg_match('/([^:]+)/', $value, $match);
      		$paths[] = sprintf('<a href="/Shares/Browse?dir=%s" target="_blank">%s</a>', $match[1], $value);
      	}
      }
    ?>
    <tr>
      <td><?
      print $ct["Running"] ? 
      "<button style=\"color:#FF2400;font-weight:bold;width: 4em;\" onclick=\"containerControl('".$ct['Name']."','stop'); return true;\">Stop</button>":
      "<button style=\"color:#52D017;font-weight:bold;width: 4em;\" onclick=\"containerControl('".$ct['Name']."','start'); return true;\">Start</button>";
      ?></td>
      <td><a class="exec" onclick="addDocker('<?=$ct['Name'];?>');"><?=$ct['Name'];?></a></td>
      <td><?=$ct['Image'];?></td>
      <td><?=$ct['Created'];?></td>
      <td><a class="log" onclick="execWithLog('/usr/bin/docker logs <?=$ct['Name'];?>','Log for <?=$ct['Name'];?>', false, false)"><?=$ct['Status'];?></a></td>
      <td><?=implode("<br>", $ports);?></td>
      <td><?=implode("<br>", $paths);?></td>
      <td><?=$ct['Id'];?></td>
      <?  ?>
      <td><input type="checkbox"  onclick="autoStart('<?=$ct['Name'];?>'); return true;" <?=$autostart;?>></td>
      <td>
        <? $updateStatus = $DockerUpdate->updateStatus($ct['Name']);
            if ($updateStatus == "FALSE"){
              $updateTxt = "<span style=\"color:#52D017;font-weight:bold;\">Update</span>";
            } else if ($updateStatus == "TRUE"){
              $updateTxt = "<span>Updated</span>";
            } else {
              $updateTxt = "<span style=\"color:#FF2400;\">N/A</span>";
            }
            printf("<a class=\"exec\" onclick=\"updateContainer('%s');\">%s</a>", $ct["Name"], $updateTxt);
        ?>
      </td>
      <td><a class="exec" onclick="rmContainer('<?=$ct["Name"];?>','<?=$ct["Image"];?>');">Remove</a></td>
    </tr>
    <?};?>
  </tbody>
</table>
<br>

<div id="title"><span class="left"><img src="/plugins/dockerMan/dockerMan.png" class="icon" width="16" height="16">Docker Images</span></div>
<table class="tablesorter" id="docker_images">
  <thead>
    <tr><th>TAG</th><th>IMAGE ID</th><th>CREATED</th><th>VIRTUAL SIZE</th><th>REMOVE</th></tr>
  </thead>
  <tbody>
    <? $all_images = $docker->getDockerImages();
       foreach($all_images as $image){ ?>
    <tr>
      <td><?=implode("<br>",$image['Tags']);?></td>
      <td><?=htmlentities($image['Id']);?></td>
      <td><?=htmlentities($image['Created']);?></td>
      <td><?=htmlentities($image['VirtualSize']);?></td>
      <td><a class="exec" onclick="rmImage('<?=htmlentities($image['Id']);?>','<?=htmlentities($image['Tags'][0]);?>'); return true;">Remove</a></td>
    </tr>
    <?};?>
  </tbody>
</table>

<?};};?>
