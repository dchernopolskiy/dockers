Icon="dockerMan.png"
Menu="ExtensionMenu"
Title="Docker"
---
<link type="text/css" rel="stylesheet" href="/plugins/webGui/style/default_tablesorter.css">
<script type="text/javascript" src="/plugins/vendor/tablesorter/jquery.tablesorter.min.js"></script>
<link type="text/css" rel="stylesheet" href="/plugins/vendor/imprompu/jquery-impromptu.min.css">
<script type="text/javascript" src="/plugins/vendor/imprompu/jquery-impromptu.min.js"></script>
<?php
function pgrep($process_name) {
	$pid = exec("pgrep $process_name", $output, $retval);
	if ($retval != 0)
		$pid = FALSE;
	return $pid;
}

// Docker configuration file
$cfgfile = "/boot/config/docker.cfg";

// Set defaults
$dockercfg = array(
	'DOCKER_HOME' => '/mnt/cache/docker',
	'DOCKER_OPTS' => '--storage-driver=btrfs',
	'DOCKER_CONTAINERS' => ''
);

if (file_exists($cfgfile)) {
	$dockercfg = array_merge($dockercfg, parse_ini_file($cfgfile));
}

$docker_image_exists = file_exists($dockercfg['DOCKER_HOME']);

# Update the start/stop configuration
if ($_POST){
	$container = trim($_POST['#container']);
	unset($_POST['#container']);

	$new_containers = "";
	if( strpos($dockercfg["DOCKER_CONTAINERS"], $container) !== FALSE){
		foreach( explode(',', $dockercfg["DOCKER_CONTAINERS"]) as $ct) {
			$ct = trim($ct);
			if (strlen($ct)){
				if(preg_match("/\b{$ct}\b/", $container) === 0){
					$new_containers = $new_containers.$ct.",";
				}
			}
		}
	} else {
		$new_containers = $dockercfg["DOCKER_CONTAINERS"].",$container,";
	}
	$new_containers = preg_replace("/,,|,$|^,/","", $new_containers);

	$_POST["DOCKER_CONTAINERS"] = $new_containers;
	include("/usr/local/emhttp/plugins/webGui/update_cfg.php");

} else {

// Add the Docker JSON client
include("/usr/local/emhttp/plugins/dockerMan/DockerClient.php");
$docker = new DockerClient();

function is_autostart($ct_name, $string){
	foreach( explode(',', $string) as $x) {
		if ( $x == $ct_name){
			return TRUE;
		}
	}
	return FALSE;
}

// array must be started since that's where we store domains
//
if ($var['fsState'] != "Started") {
?>
  <p class="notice">Array must be Started to view Docker plugins.</p>
  <?php
	return;
}

if (pgrep('docker') === FALSE) { ?>

<form markdown="1" method="POST" action="/plugins/webGui/exec.php" target="progressFrame">
<input type="hidden" name="command" value="/etc/rc.d/rc.docker start" />  

Service Status:

:   Shut down
    > Before you can start the Docker service for the first time, please specify a folder 
    > path for Docker to install to.  Once started, Docker will always automatically start 
    > after the array has been started.

:   <input type="submit" value="Start" />

</form>

<form markdown="1" method="POST" action="/plugins/webGui/update_cfg.php" target="progressFrame">
<input type="hidden" name="#file" value="<?=$cfgfile;?>" />

Docker Install Location:

:   <input type="text" name="DOCKER_HOME" value="<?=$dockercfg['DOCKER_HOME'];?>" placeholder="e.g. /mnt/cache/docker" />
    > You must specify a btrfs formatted path for Docker.  The system will automatically
    > create any subfolders under this path when the Docker service is started.

:   <input type="submit" value="Apply" />

</form>

<?PHP } else { ?>

<form markdown="1" method="POST" action="/plugins/webGui/exec.php" target="progressFrame">
<input type="hidden" name="command" value="/etc/rc.d/rc.docker stop" />

Service Status:

:   Started
    > Before you can start the Docker service for the first time, please specify a folder
    > path for Docker to install to.  Once started, Docker will always automatically start
    > after the array has been started.

:   <input type="submit" value="Stop" />

Docker Install Location:

:   <?=$dockercfg['DOCKER_HOME'];?>
    > You must specify a btrfs formatted path for Docker.  The system will automatically
    > create any subfolders under this path when the Docker service is started.

</form>

<?PHP } ?>

<? if (pgrep('docker')) { ?>

<br>
<style>
  a.log{cursor:zoom-in;}
  a.exec{cursor:pointer;}
</style>

<script type="text/javascript" charset="utf-8">

function rmContainer(container, image){
	$.prompt("Removing container: ", {
		title: "Are you sure?",
		buttons: { "Container and Image": "ct_im","Just the container" : "ct", "Cancel" : false },
		position: { width: 430,},
		submit: function(e,v,m,f){
		// use e.preventDefault() to prevent closing when needed or return false. 
		//e.preventDefault(); 
		$.prompt.close();
		if (v == "ct_im"){
			var cmd = '/usr/bin/docker rm -f ' + container + '; docker rmi ' + image;
			execWithLog(cmd ,'Removing container: ' + container, false, true);
		} else if (v == "ct"){
			var cmd = '/usr/bin/docker rm -f ' + container;
			execWithLog(cmd ,'Removing container: ' + container, false, true);
		}
	}
});}

$(document).ready(function() {
  $("#docker_containers").tablesorter( {sortList: [[1,0]]} );
  $('#docker_containers tr:even').addClass('odd');
  $("#docker_images").tablesorter( {sortList: [[0,0]]} );
  $('#docker_images tr:even').addClass('odd');
});
function autoStart(container){
  document.getElementsByName("#container")[0].value = container;
  document.forms["formAutostart"].submit();
};
function containerControl(container, action){
  document.getElementById("#cmdStartStop").value = "/usr/bin/docker " + action + " " + container;
  document.forms["formStartStop"].submit();
};
function execWithLog(cmd, desc, ask, reload) {
  if (ask){
    r = confirm(desc+"\n\nAre you sure?");
    if (r == false){return;}
  }
  Shadowbox.open({
    content: "/plugins/dockerMan/execWithLog.php?cmd=" + cmd,
    player:'iframe',
    title: desc,
    height:((screen.height*2)/3)||0,
    width:((screen.width*2)/3)||0,
    options:{
      onClose: function(){ if (reload){location.reload();}},
    }
  });
};
function addDocker() {
  reload=true;
  Shadowbox.open({
    content: "/plugins/dockerMan/CreateDocker.php",
    player:'iframe',
    title: 'Create Container:',
    height:((screen.height*2)/3)||0,
    width:'670px',
    options:{
      onClose: function(){ if (reload){location.reload();}},
    }
  });
};
</script>

<form markdown="1" id="formAutostart" method="POST" action="" target="progressFrame">
<input type="hidden" name="#container" value="none" />
<input type="hidden" name="#file" value="<?=$cfgfile;?>" />
</form>

<form method="POST" id="formStartStop" action="/plugins/webGui/exec.php" target="progressFrame">
<input type="hidden" id="#cmdStartStop" name="command" value="" />
</form>

<button onclick="teste('container', 'image');" />teste</button>

<div id="title"><span class="left"><img src="/plugins/dockerMan/dockerMan.png" class="icon" width="16" height="16">Docker Containers</span><div style="text-align:right;"><a class="exec" onclick="addDocker();"><img src="/plugins/dockerMan/plus.png" alt="plus" width="30px" height=""></a> </div></div>
<table class="tablesorter" id="docker_containers">
  <thead>
    <tr><th>CONTROL</th><th>NAME</th><th>IMAGE</th><th>COMMAND</th><th>CREATED</th><th>STATUS</th><th>PORTS</th><th>CONTAINER ID</th><th>AUTOSTART</th><th>REMOVE</th></tr>
  </thead>
  <tbody>
    <? $all_containers = $docker->getDockerContainers();
       foreach($all_containers as $ct){ ?>
    <tr>
      <td><?
      print $ct["Running"] ? 
      "<button style=\"color:#FF2400;font-weight:bold;width: 4em;\" onclick=\"containerControl('".$ct['Name']."','stop'); return true;\">Stop</button>":
      "<button style=\"color:#52D017;font-weight:bold;width: 4em;\" onclick=\"containerControl('".$ct['Name']."','start'); return true;\">Start</button>";
      ?></td>
      <td><?=$ct['Name'];?></td>
      <td><?=$ct['Image'];?></td>
      <td><?=$ct['Cmd'];?></td>
      <td><?=$ct['Created'];?></td>
      <td><a class="log" onclick="execWithLog('/usr/bin/docker logs <?=$ct['Name'];?>','Log for <?=$ct['Name'];?>', false, false)"><?=$ct['Status'];?></a></td>
      <td><?=implode("<br>", $ct['Ports']);?></td>
      <td><?=$ct['Hostname'];?></td>
      <? $checked = is_autostart($ct['Name'], $dockercfg['DOCKER_CONTAINERS']) ? "checked" : ""; ?>
      <td><input type="checkbox"  onclick="autoStart('<?=$ct['Name'];?>'); return true;" <?=$checked;?>></td>
      <td><a class="exec" onclick="rmContainer('<?=$ct["Name"];?>','<?=$ct["Image"];?>');">Remove</a></td>
    </tr>
    <?};?>
  </tbody>
</table>
<br>

<div id="title"><span class="left"><img src="/plugins/dockerMan/dockerMan.png" class="icon" width="16" height="16">Docker Images</span></div>
<table class="tablesorter" id="docker_images">
  <thead>
    <tr><th>TAG</th><th>IMAGE ID</th><th>CREATED</th><th>VIRTUAL SIZE</th><th>REMOVE</th></tr>
  </thead>
  <tbody>
    <? $all_images = $docker->getDockerImages();
       foreach($all_images as $image){ ?>
    <tr>
      <td><?=implode("<br>",$image['Tags']);?></td>
      <td><?=htmlentities($image['Id']);?></td>
      <td><?=htmlentities($image['Created']);?></td>
      <td><?=htmlentities($image['VirtualSize']);?></td>
      <td><a class="exec" onclick="execWithLog('/usr/bin/docker rmi -f <?=htmlentities($image['Id']);?>','Removing image: <?=htmlentities($image['Id']);?>', true, true )">Remove</a></td>
    </tr>
    <?};?>
  </tbody>
</table>

<?};};?>
